package eu.zvynx.capacitor.pass2wallet;

import android.app.Activity;
import android.content.Intent;
import android.content.IntentSender;

import com.getcapacitor.JSObject;
import com.getcapacitor.JSArray;
import com.getcapacitor.JSObject;
import com.getcapacitor.Plugin;
import com.getcapacitor.PluginCall;
import com.getcapacitor.PluginMethod;
import com.getcapacitor.annotation.CapacitorPlugin;

import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.pay.Pay;
import com.google.android.gms.pay.PayApiAvailabilityStatus;
import com.google.android.gms.pay.PayClient;

@CapacitorPlugin(
    name = "CapacitorPassToWallet",
    requestCodes = { CapacitorPassToWalletPlugin.ADD_TO_GOOGLE_WALLET_REQUEST_CODE }
)
public class CapacitorPassToWalletPlugin extends Plugin {

    private PayClient walletClient;
    private PluginCall pendingGoogleWalletCall; 

    protected static final int ADD_TO_GOOGLE_WALLET_REQUEST_CODE = 19008;

    @Override
    public void load() {
        super.load();

        if (getContext() != null) {
            walletClient = Pay.getClient(getContext());
        }
    }


    /**
     * Checks if the Google Wallet API is available and the device is capable of adding passes.
     * @param call PluginCall
     */
    @PluginMethod
    public void canAddToGoogleWallet(PluginCall call) {
        if (walletClient == null) {
          
            if (getContext() != null) {
                walletClient = Pay.getClient(getContext());
            } else {
                JSObject result = new JSObject();
                result.put("isAvailable", false);
                result.put("reason", "Google Wallet client not initialized, context unavailable.");
                call.resolve(result);
                return;
            }
        }

        walletClient
            .getPayApiAvailabilityStatus(PayClient.RequestType.SAVE_PASSES)
            .addOnSuccessListener(
                status -> {
                    JSObject result = new JSObject();
                    boolean isAvailable = status == PayApiAvailabilityStatus.AVAILABLE;
                    result.put("isAvailable", isAvailable);
                    if (!isAvailable) {
                        result.put("reason", "Google Wallet status: " + status + ". Ensure Google Wallet app is installed and updated.");
                    }
                    call.resolve(result);
                }
            )
            .addOnFailureListener(
                e -> {
                    JSObject result = new JSObject();
                    result.put("isAvailable", false);
                    result.put("reason", "Error checking Google Wallet API: " + e.getMessage());
                    call.resolve(result);
                }
            );
    }

    /**
     * Initiates the process of adding a pass to Google Wallet using a JWT.
     * The JWT should be generated by your backend.
     * @param call PluginCall, expects "jwt" (String) in data.
     */
    @PluginMethod
    public void addJwtToGoogleWallet(PluginCall call) {
        if (walletClient == null) {
             if (getContext() != null) {
                walletClient = Pay.getClient(getContext());
            } else {
                call.reject("Google Wallet client not initialized, context unavailable.");
                return;
            }
        }

        String passJwt = call.getString("jwt");

        if (passJwt == null || passJwt.isEmpty()) {
            call.reject("A 'jwt' (String) must be provided to add to Google Wallet.");
            return;
        }

        // Store the call to respond to it later in onActivityResult
        this.pendingGoogleWalletCall = call;

        // The result will be handled in the `handleOnActivityResult` method.
        walletClient.savePassesJwt(passJwt, getActivity(), ADD_TO_GOOGLE_WALLET_REQUEST_CODE);
    }


    /**
     * Handles the result from an activity started by the plugin.
     * This is crucial for the Google Wallet `savePassesJwt` flow.
     * @param requestCode The integer request code originally supplied to startActivityForResult(),
     * allowing you to identify who this result came from.
     * @param resultCode The integer result code returned by the child activity through its setResult().
     * @param data An Intent, which can return result data to the caller (various data can be attached to Intent "extras").
     */
    @Override
    protected void handleOnActivityResult(int requestCode, int resultCode, Intent data) {
        super.handleOnActivityResult(requestCode, resultCode, data);

        if (pendingGoogleWalletCall == null) {
            return;
        }

        if (requestCode == ADD_TO_GOOGLE_WALLET_REQUEST_CODE) {
            JSObject result = new JSObject();
            if (resultCode == Activity.RESULT_OK) {
                result.put("message", "Pass added or save process initiated successfully.");
                result.put("passAdded", true);
                pendingGoogleWalletCall.resolve(result);
            } else if (resultCode == Activity.RESULT_CANCELED) {
                pendingGoogleWalletCall.reject("Save to Wallet was cancelled by the user.");
            } else {
                // Handle other potential errors from the Google Wallet SDK.
                // The Wallet SDK might provide an error code in the Intent data.
                String errorMessage = "Failed to save pass to Google Wallet.";
                if (data != null && data.hasExtra("com.google.android.gms.wallet.EXTRA_ERROR_CODE")) {
                    // See https://developers.google.com/android/reference/com/google/android/gms/wallet/WalletConstants for ERROR_CODE_*
                    int errorCode = data.getIntExtra("com.google.android.gms.wallet.EXTRA_ERROR_CODE", -1);
                    errorMessage += " Error code: " + errorCode;
                }

                pendingGoogleWalletCall.reject(errorMessage);
            }

            pendingGoogleWalletCall = null;
        }
    }
}
